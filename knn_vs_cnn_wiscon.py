# -*- coding: utf-8 -*-
"""KNN_VS_CNN_WISCON

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VCkBKOsZhzmP8_ffENsUrZLTlwS-SlH6
"""

import tensorflow as tf
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Conv1D, MaxPool1D,Flatten,Dense,Dropout,BatchNormalization
from tensorflow.keras.optimizers import Adam
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import datasets,metrics
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

cancerData = datasets.load_breast_cancer()

X = pd.DataFrame(data = cancerData.data, columns=cancerData.feature_names )
X.head()

y = cancerData.target
X.shape

X_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.1,stratify=y)
y_test.shape

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
X_train = X_train.reshape(512,30,1)
X_test = X_test.reshape(57,30,1)

model = Sequential()
model.add(Conv1D(filters=16,kernel_size=2,activation='relu',input_shape=(30,1)))
model.add(BatchNormalization())
model.add(Dropout(0.2))

model.add(Conv1D(32,2,activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.2))

model.add(Flatten())
model.add(Dense(32,activation='relu'))
model.add(Dropout(0.2))

model.add(Dense(1,activation='sigmoid'))
model.summary()

model.compile(optimizer=Adam(learning_rate=0.0001),loss='binary_crossentropy',metrics=['accuracy'])
history = model.fit(X_train,y_train,epochs=50,verbose=1,validation_data=(X_test,y_test))

print(X_test)
Y_val_pred = model.predict(X_test)
print('accuracy =',max(history.history['accuracy'])*100)

from sklearn.metrics import precision_recall_fscore_support
#print(y_test)
#print(np.array(Y_val_pred))
average_precision = precision_recall_fscore_support(np.array(y_test), Y_val_pred.round(), average='macro')
print('Average precision score:',
      average_precision)

from collections import Counter
print(np.array(y_test))
#print(Y_val_pred)
fpr, tpr, thresholds = metrics.roc_curve(np.array(y_test), np.array(Y_val_pred.round()), pos_label=None)
print(thresholds)
print('Roc: ',metrics.auc(fpr, tpr))

import itertools
from sklearn.metrics import confusion_matrix
#confusion_matrix(np.argmax(y_test, axis=1), np.argmax(Y_val_pred, axis=1))
print(np.array(y_test))
print(np.argmax(y_test, axis=0))
print(np.argmax(Y_val_pred))
cm = confusion_matrix(np.array(y_test), np.array(Y_val_pred.round()))
print(cm)
def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    print(cm)

    plt.imshow(cm, interpolation='nearest', cmap='OrRd')
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=55)
    plt.yticks(tick_marks, classes)

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.tight_layout()

cm_plot_label =['benign', 'malignant']
plot_confusion_matrix(cm, cm_plot_label, title ='Confusion Metrix for Breast Cancer')

def plotLearningCurve(history,epochs):
  epochRange = range(1,epochs+1)
  plt.plot(epochRange,history.history['accuracy'])
  plt.plot(epochRange,history.history['val_accuracy'])
  plt.title('Model Accuracy')
  plt.xlabel('Epoch')
  plt.ylabel('Accuracy')
  plt.legend(['Train','Validation'],loc='upper left')
  plt.show()

  plt.plot(epochRange,history.history['loss'])
  plt.plot(epochRange,history.history['val_loss'])
  plt.title('Model Loss')
  plt.xlabel('Epoch')
  plt.ylabel('Loss')
  plt.legend(['Train','Validation'],loc='upper left')
  plt.show()

plotLearningCurve(history,35)